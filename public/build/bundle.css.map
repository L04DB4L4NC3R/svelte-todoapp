{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/todos.svelte",
    "../../src/todoItem.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport ToDoItem from './todoItem.svelte';\n// import {db} from './firebase';\n// import {collectionData} from 'rxfire/firestore';\n\nimport {startWith} from 'rxjs/operators';\n\nimport  {Col,Row,Container,Button} from 'sveltestrap'\n\nimport todoStore from './store.js'\n\nexport let uid;\n\nlet text=''\nlet idEditing = false;\n\n\nlet todos\n\ntodoStore.subscribe(td => {\n\ttodos = td\n})\n\nfetch(\"http://localhost:3000/api/v1/todo/\", {\n\theaders: {\n\t\t\"Authorization\": localStorage.getItem(\"token\")\n\t}\n}).then(res => res.json()\n).then(result => {\n\tlet newTodos = []\n\tfor (let todo of result.todos) {\n\t\tnewTodos.push({id: todo._id, text: todo.text,\n\t\t\tdone: todo.done})\n\t}\n\ttodoStore.set(newTodos)\n}).catch(console.error)\n\nfunction add()\n{\n\tfetch(\"http://localhost:3000/api/v1/todo/\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"Authorization\": localStorage.getItem(\"token\")\n\t\t},\n\t\tbody: JSON.stringify({text})\n\t}).then(res => res.json()\n\t).then(result => {\n\t\tconsole.log(result)\n\t\tlet newTodos = []\n\t\tfor (let todo of result.todos) {\n\t\t\tnewTodos.push({id: todo._id, text: todo.text,\n\t\t\t\tdone: todo.done})\n\t\t}\n\t\ttodoStore.set(newTodos)\n\t}).catch(console.error)\n}\n\nfunction removeTask(event)\n{   \nconst {id} = event.detail;\n\n\n\tfetch(`http://localhost:3000/api/v1/todo/?id=${id}`, {\n\t\tmethod: \"DELETE\",\n\t\theaders: {\n\t\t\t\"Authorization\": localStorage.getItem(\"token\")\n\t\t}\n\t}).then(res => res.json()\n\t).then(result => {\n\t\tlet newTodos = []\n\t\tfor (let todo of result.todos) {\n\t\t\tif (todo._id == id) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnewTodos.push({id: todo._id, text: todo.text,\n\t\t\t\tdone: todo.done})\n\t\t}\n\t\ttodoStore.set(newTodos)\n\t}).catch(console.error)\n}\n\n\nfunction updateStatus(event)\n{\n    const {id,newStatus} = event.detail;\n\n\tfetch(`http://localhost:3000/api/v1/todo/?id=${id}`, {\n\t\tmethod: \"PUT\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"Authorization\": localStorage.getItem(\"token\")\n\t\t},\n\t\tbody: JSON.stringify({is_done: newStatus})\n\t}).then(res => res.json()\n\t).then(result => {\n\t\tlet newTodos = []\n\t\tfor (let todo of result.todos) {\n\t\t\tif (todo._id == id) {\n\t\t\t\ttodo.done = newStatus\n\t\t\t}\n\t\t\tnewTodos.push({id: todo._id, text: todo.text,\n\t\t\t\tdone: todo.done})\n\t\t}\n\t\ttodoStore.set(newTodos)\n\t}).catch(console.error)\n    \n}\n\nfunction editTask(event)\n{\n    const {id,text} = event.detail;\n\n\tfetch(`http://localhost:3000/api/v1/todo/updatetext/?id=${id}`, {\n\t\tmethod: \"PUT\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"Authorization\": localStorage.getItem(\"token\")\n\t\t},\n\t\tbody: JSON.stringify({text})\n\t}).then(res => res.json()\n\t).then(result => {\n\t\tlet newTodos = []\n\t\tfor (let todo of result.todos) {\n\t\t\tif (todo._id == id) {\n\t\t\t\ttodo.text = text\n\t\t\t}\n\t\t\tnewTodos.push({id: todo._id, text: todo.text,\n\t\t\t\tdone: todo.done})\n\t\t}\n\t\ttodoStore.set(newTodos)\n\t}).catch(console.error)\n}\n\n</script>\n\n<Row>\n<Col xs='auto'>\n<input bind:value={text} placeholder=\"Enter the New Task...\">\n</Col>\n\n<Col xs='auto'>\n<Button color=\"warning\" on:click={add}>Add Task</Button>\n</Col>\n</Row>\n\n<div class=\"inner-container\">\n\n    <ul>\n        {#each todos as todo}\n            <ToDoItem {...todo} on:remove={removeTask} on:toggle={updateStatus} on:edit={editTask}/>\n        {/each}\n    </ul>\n</div>\n\n<style>\n\n.inner-container{\n    margin-top: 10px;\n}\n</style>\n",
    "<script>\nimport {createEventDispatcher} from 'svelte';\nimport {Col,Row,Container} from 'sveltestrap';\n\nconst dispatch = createEventDispatcher();\n\n\n\nexport let id;\nexport let text;\nexport let done;\nlet isEditing = false\n\n\nfunction updateTask()\n{\n    isEditing = !isEditing;\n}\n\nfunction edit()\n{\n    isEditing = !isEditing;\n    dispatch('edit',\n    {\n        id,\n        text\n    }\n    )\n}\n\nfunction remove()\n{\n    dispatch('remove',\n    {\n        id\n    })\n}\n\nfunction toggleStatus()\n{\n    let newStatus = !done\n    dispatch('toggle',\n    {\n        id,\n        newStatus\n    })\n}\n\n</script>\n\n\n<li>\n    <Container>\n    <Row>\n        {#if !isEditing}\n        <Col xs=\"auto\"><button on:click={updateTask}>‚úèÔ∏è</button></Col>\n        {:else}\n           <Col xs=\"auto\"><button on:click={edit}>üíæ</button></Col>  \n        {/if}\n\n\n         <Col xs=\"auto\"><button on:click={remove}>üóë</button></Col>\n\n\n{#if done}\n\n       <Col xs=\"auto\"><button on:click={toggleStatus}>‚úÖ</button></Col>\n       <Col sm=\"6\">\n       <span class=\"is-complete\">{text}</span>\n       </Col>\n{:else}\n\n        <Col xs=\"auto\"><button on:click={toggleStatus}>‚ùå</button></Col>\n        {#if !isEditing}\n       <Col sm=\"7\">\n       <span>{text}</span>\n       </Col>\n       {:else}\n    <Col sm=\"7\">\n       <span><input type=\"text\" bind:value={text}></span>\n       </Col>\n       {/if}\n\n\n{/if}\n\n\n    </Row>\n    </Container>\n<hr>\n</li>\n\n\n<style>\n.is-complete{\n    text-decoration: line-through;\n    color: gray;\n}\n\nbutton{\n    background-color: transparent;\n    border: 0px;\n}\n\nli{\n    list-style-type: none;\n}\n\n\n</style>\n"
  ],
  "names": [],
  "mappings": "AA6JA,8BAAgB,CAAC,AACb,UAAU,CAAE,IAAI,AACpB,CAAC;ACjED,0BAAY,CAAC,AACT,eAAe,CAAE,YAAY,CAC7B,KAAK,CAAE,IAAI,AACf,CAAC,AAED,oBAAM,CAAC,AACH,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,GAAG,AACf,CAAC,AAED,gBAAE,CAAC,AACC,eAAe,CAAE,IAAI,AACzB,CAAC"
}